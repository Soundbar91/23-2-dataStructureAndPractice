# 자신만의 그래프의 노드 리스트
vertex = ['1', '2', '3', '4', '5', '6', '7', '8']
# 인접 리스트로 표현한 자신만의 그래프
adjList = [[2, 4, 5],
           [6],
           [0, 4, 6, 7],
           [4],
           [0, 2, 3],
           [0],
           [1, 2],
           [2]]

"""
깊이우선탐색(인접 리스트 방식)
매개 변수로 노드 리스트, 방문할 인접 리스트, 시작할 노드의 인덱스, 방문 리스트를 넘김
방문 리스트는 노드 리스트만큼 크기가 설정이 되있으며 기본값은 False로 설정
방문한 노드에 대해서는 True로 변경하여 방문의 여부를 구별
"""
def DFS(vtx, adj, s, visited) :
    """
    방문한 노드에 대해 출력
    해당 노드에 대해 방문 표시
    """
    print(vtx[s], end=' ')          
    visited[s] = True
    
    """
    반복문을 통해 방문 가능한 노드에 방문
    ex) 0번재 노드('1')에서 출발 -> 0번째 행에서 방문하지 않는 노드 검사
    2번째 노드('3')를 아직 방문하지 않았으므로, 2번째 행을 DFS의 매개변수로 넘기고 재귀 호출
    재귀 호출 함수 내에서도 2번째 행에서 방문하지 않는 노드 검사를 하고 방문하지 않는 노드에 대해 DFS 재귀 호출
    """
    for i in adj[s] :
        if visited[i] == False :
            DFS(vtx, adj, i, visited)

print('DFS(출발:A) : ', end="")
DFS(vertex, adjList, 0, [False]*len(vertex))